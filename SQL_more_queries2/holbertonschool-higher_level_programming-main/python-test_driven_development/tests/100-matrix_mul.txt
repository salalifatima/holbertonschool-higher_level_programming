>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
>>> print(matrix_mul())
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> print(matrix_mul([[3]]))
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[7, 10], [15, 22]]

>>> print(matrix_mul(((1, 2), (3, 4)), ((1, 2), (3, 4))))
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

>>> print(matrix_mul([[1, 2], (3, 4)], [[1, 2], [3, 4]]))
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

>>> print(matrix_mul([],[]))
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> print(matrix_mul([[1]],[[]]))
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2+5j], [3, 4]]))
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

>>> print(matrix_mul([[1, 2], [3, 4]], [[1], [3, 4]]))
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

>>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6], [7, 8]]))
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

>>> print(matrix_mul([[12]], "str"))
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

>>> print(matrix_mul([[12]], [1,2,3]))
Traceback (most recent call last):
    ...
TypeError: m_b must be a list of lists

>>> print(matrix_mul([[1j, 2j], [3j, 4j]], [[1, 2], [3, 4]]))
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

>>> print(matrix_mul([[1], [3,4 ,5 ], [6, 7]], [[3, 4], [5, 6], [7, 8]]))
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size
